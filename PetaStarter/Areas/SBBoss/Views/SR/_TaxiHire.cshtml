@model Speedbird.SRdetail
<fieldset @ViewBag.IsReadOnly>
    <div class="form-row">
        <div class="input-group col mb-3">
            <div class="input-group-prepend"><span class="input-group-text">To Location</span></div>
            @Html.EditorFor(model => model.ToLoc, new { htmlAttributes = new { @type = "text", @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ToLoc, "", new { @class = "text-danger" })
        </div>
        <div class="input-group col mb-3">
            <div class="input-group-prepend"><span class="input-group-text">To Date</span></div>
            @Html.EditorFor(model => model.Tdate, new { htmlAttributes = new { @type = "text", @class = "eadate form-control" } })
            @Html.ValidationMessageFor(model => model.Tdate, "", new { @class = "text-danger" })

        </div>
        <div class="input-group col mb-3">
            <div class="input-group-prepend"><span class="input-group-text">Taxi Type</span></div>
            @Html.DropDownList("CarType", null, htmlAttributes: new { @type = "text", @class = "form-control" })
            @Html.ValidationMessageFor(model => model.CarType, "", new { @class = "text-danger" })
        </div>

    </div>
    <div class="form-row">
        <div class="input-group col mb-3">
            <div class="input-group-prepend"><span class="input-group-text">Model</span></div>
            @Html.EditorFor(model => model.Model, new { htmlAttributes = new { @type = "text", @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Model, "", new { @class = "text-danger" })

        </div>
        <div class="input-group col mb-3">
            <div class="input-group-prepend"><span class="input-group-text">Pick Up Point</span></div>
            @Html.EditorFor(model => model.PickUpPoint, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.PickUpPoint, "", new { @class = "text-danger" })

        </div>
        <div class="input-group col mb-3">
            <div class="input-group-prepend"><span class="input-group-text">Drop Point</span></div>
            @Html.EditorFor(model => model.DropPoint, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.DropPoint, "", new { @class = "text-danger" })

        </div>
    </div>
    <div class="form-row">
        <div class="input-group col mb-3">
            <div class="input-group-prepend"><span class="input-group-text">Has Ac</span></div>
            @Html.EditorFor(model => model.HasAc, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.HasAc, "", new { @class = "text-danger" })

        </div>

        <div class="input-group col mb-3">
            <div class="input-group-prepend"><span class="input-group-text">Has Carrier</span></div>
            @Html.EditorFor(model => model.HasCarrier, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.HasCarrier, "", new { @class = "text-danger" })

        </div>
        <div class="input-group col mb-3">
            <div class="input-group-prepend"><span class="input-group-text">Pay To</span></div>
            <select name="PayTo" class="form-control">
                <option value="Paid to Us">
                    Paid To US
                </option>
                <option value="Paid to Driver">
                    Paid To Driver
                </option>
            </select>
            @Html.ValidationMessageFor(model => model.PayTo, "", new { @class = "text-danger" })

        </div>

    </div>
    <div class="form-row">
        <div class="input-group col mb-3">
            <div class="input-group-prepend"><span class="input-group-text">Rate Basis</span></div>
            <select name="RateBasis" class="form-control col-3">
                <option value=" 8hrs-80kms">
                    8hrs-80kms
                </option>
            </select>
            @Html.ValidationMessageFor(model => model.RateBasis, "", new { @class = "text-danger" })

        </div>
        @if (Model?.SRDID > 0)
        {
            <div class="input-group col mb-3">

                <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#AssignDriverModal" data-srdid="@Model.SRDID">
                    Assign Driver
                </button>

            </div>

        }
    </div>

</fieldset>


@if (Model?.SRDID != null)
{
<script>
$('#SaveDriver').click(function() {
        var detFrm = $('#AssignDrvFrm');

        if (typeof(detFrm[0]) == 'object')
        {
    $.ajax({
        url: '@Url.Action("AssignDriver", "SR")',
        type: 'post',
        data: $(detFrm).serialize(),
        success: function() {
                    window.location.assign('@Url.Action("SRdetails", new { SRDID = Model.SRDID })');
                }
            });
        }
    });
</script>
}

<script>
    $('#AssignDriver').load('@Url.Action("_AssignDriver")');
  

    $(function () {
        //DateTime picker
        $('input[type=date]').datetimepicker({
            dateFormat: "dd-MM-yy",
            showButtonPanel: true,
            changeMonth: true,
            changeYear: true,
            timeFormat: "hh:mm"

        }).attr('type', 'text').attr('autocomplete', 'off');

        $('.eadate').datepicker({
            dateFormat: "dd-MM-yy",
            showButtonPanel: true,
            changeMonth: true,
            changeYear: true,


        });

        //Disable the browsers default date picker
        jQuery.validator.methods["date"] = function (value, element) { return true; }

    });
      //GeoSelector
        $(document).ready(function () {
        function formatState(state) {
            if (!state.id) {
                return state.text;
            }
            var parts = state.text.split(",");
            return parts[0];

        };



            $(".GeoSelect").select2({
            placeholder: "Type 3 letters to choose",
                templateSelection: formatState,

                ajax: {
                url: '@(Url.Action("GetLocations", "GeoTree"))',
                    dataType: 'json',
                    quietMillis: 250,
                    results: function (data, page) {
                    return { results: data.data };
                }
            }
        });


    });

</script>