@model Speedbird.SRdetail
<fieldset @ViewBag.IsReadOnly>
    <div class="form-row">
        <div class="input-group col mb-3">
            <div class="input-group-prepend"><span class="input-group-text">To Location</span></div>
            @Html.EditorFor(model => model.ToLoc, new { htmlAttributes = new { @type = "text", @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ToLoc, "", new { @class = "text-danger" })
        </div>
        <div class="input-group col mb-3">
            <div class="input-group-prepend"><span class="input-group-text">To Date</span></div>
            @Html.EditorFor(model => model.Tdate, new { htmlAttributes = new { @type = "date", @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Tdate, "", new { @class = "text-danger" })

        </div>
        <div class="input-group col mb-3">
            <div class="input-group-prepend"><span class="input-group-text">Taxi Type</span></div>
            @Html.DropDownList("CarType", null, htmlAttributes: new { @type = "text", @class = "form-control" })
            @Html.ValidationMessageFor(model => model.ToLoc, "", new { @class = "text-danger" })
        </div>
   
    </div>
    <div class="form-row">
        <div class="input-group col mb-3">
            <div class="input-group-prepend"><span class="input-group-text">Model</span></div>
            @Html.EditorFor(model => model.Model, new { htmlAttributes = new { @type = "text", @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Model, "", new { @class = "text-danger" })

        </div>
        <div class="input-group col mb-3">
            <div class="input-group-prepend"><span class="input-group-text">Pick Up Point</span></div>
            @Html.EditorFor(model => model.PickUpPoint, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.PickUpPoint, "", new { @class = "text-danger" })

        </div>
        <div class="input-group col mb-3">
            <div class="input-group-prepend"><span class="input-group-text">Drop Point</span></div>
            @Html.EditorFor(model => model.DropPoint, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.DropPoint, "", new { @class = "text-danger" })

        </div>
    </div>
        <div class="form-row">
            <div class="input-group col mb-3">
                <div class="input-group-prepend"><span class="input-group-text">Has Ac</span></div>
                @Html.EditorFor(model => model.HasAc, new { htmlAttributes = new {  @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.HasAc, "", new { @class = "text-danger" })

            </div>

            <div class="input-group col mb-3">
                <div class="input-group-prepend"><span class="input-group-text">Has Carrier</span></div>
                @Html.EditorFor(model => model.HasCarrier, new { htmlAttributes = new {  @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.HasCarrier, "", new { @class = "text-danger" })

            </div>
            <div class="input-group col mb-3">
                <div class="input-group-prepend"><span class="input-group-text">Pay To</span></div>
                <select name="PayTo" class="form-control">
                    <option value="Paid to Us">
                        Paid To US
                    </option>
                    <option value="Paid to Driver">
                        Paid To Driver
                    </option>
                </select>
                @Html.ValidationMessageFor(model => model.PayTo, "", new { @class = "text-danger" })

            </div>

        </div>
        <div class="form-row">
            <div class="input-group col mb-3">
                <div class="input-group-prepend"><span class="input-group-text">Rate Basis</span></div>
                <select name="RateBasis" class="form-control col-3">
                    <option value=" 8hrs-80kms">
                        8hrs-80kms
                    </option>
                </select>
                @Html.ValidationMessageFor(model => model.RateBasis, "", new { @class = "text-danger" })

            </div>
            @if (Model?.SRDID > 0) { 
            <div class="input-group col mb-3">

                <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#AssignDriverModal" data-srdid="@Model.SRDID">
                    Assign Driver
                </button>

            </div>

            }
        </div>

</fieldset>
<div class="modal fade" id="AssignDriverModal" tabindex="-1" role="dialog" aria-labelledby="AssignDriverLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="AssignDriverModalLabel">Assign Driver</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>

            @using (Html.BeginForm("AssignDriver", "SR", FormMethod.Post, new { id = "AssignDrvFrm" }))
            {

                @Html.AntiForgeryToken()
            <div class="modal-body">
                <div class="input-group col mb-3">
                    <div class="input-group-prepend"><span class="input-group-text">Select Driver</span></div>
                    <input type="text" id="DriverName" name="DriverName" style="color:black;" data-autocomplete-idholder="#DriverID" value="" data-autocombo-url="@Url.Action("AutoCompleteDrv")" class="form-control" />
                    @Html.ValidationMessageFor(model => model.DriverID, "", new { @class = "text-danger" })
                </div>
                <div class="input-group col mb-3">
                    <div class="input-group-prepend"><span class="input-group-text">Location</span></div>
                    <select id="GeoTreeID" name="GeoTreeID" class="form-control GeoSelect input-group.input-group-lg">
                        @foreach (var o in ViewBag.GeoId)
                        {
                          <option value="@o.Value">@o.Text</option>
                        }
                    </select>
                </div>

            </div>
            }
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button id="SaveReason" type="button" class="btn btn-primary" data-dismiss="modal">Save</button>
            </div>

        </div>
    </div>
</div>
<script>
    $('#AssignDriverModal').on('shown.bs.modal', function (event) {

        var button = $(event.relatedTarget); // Button that triggered the modal

        var modal = $(this);
        modal.find('#DriverName').focus();
        modal.find('.GeoSelect').focus();
    })

     $('#SaveReason').click(function () {
         var detFrm = $('#AssignDrvFrm');

            //Save the details form if it exists else just move on.
            if (typeof (detFrm[0]) == 'object') {
                $.ajax({
                    url: '@Url.Action("AssignDriver", "SR")',
                    type: 'post',
                    data: $(detFrm).serialize(),
                    success: function () {
                        window.location.assign('@Url.Action("SRdetails", new { SRDID = Model.SRDID })');
                    }
                });
            }
     });

    $(function () {
        //DateTime picker
        $('input[type=date]').datetimepicker({
            dateFormat: "dd-MM-yy",
            showButtonPanel: true,
            changeMonth: true,
            changeYear: true,
            timeFormat: "hh:mm"

        }).attr('type', 'text').attr('autocomplete', 'off');



        //Disable the browsers default date picker
        jQuery.validator.methods["date"] = function (value, element) { return true; }

     });
      //GeoSelector
        $(document).ready(function () {
            function formatState(state) {
                if (!state.id) {
                    return state.text;
                }
                var parts = state.text.split(",");
                return parts[0];

            };



            $(".GeoSelect").select2({
                placeholder: "Type 3 letters to choose",
                templateSelection: formatState,

                ajax: {
                    url: '@(Url.Action("GetLocations", "GeoTree"))',
                    dataType: 'json',
                    quietMillis: 250,
                    results: function (data, page) {
                        return { results: data.data };
                    }
                }
            });


        });

</script>