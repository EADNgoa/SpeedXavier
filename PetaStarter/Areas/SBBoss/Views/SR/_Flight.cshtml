@model Speedbird.SRdetail
    <style>
        input[type="checkbox"] {
            width: 20px; /*Desired width*/
            height: 20px; /*Desired height*/
           
        }
    </style>
<fieldset @ViewBag.IsReadOnly>
    @Html.Hidden("ParentID")
  
    <div class="form-row">
        <div class="input-group col mb-3">
            <div class="input-group-prepend"><span class="input-group-text">Adult No</span></div>
            @Html.EditorFor(model => model.AdultNo, new { htmlAttributes = new { @type = "text", @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.AdultNo, "", new { @class = "text-danger" })

        </div>
        <div class="input-group col mb-3">
            <div class="input-group-prepend"><span class="input-group-text">Child No</span></div>
            @Html.EditorFor(model => model.ChildNo, new { htmlAttributes = new { @type = "text", @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ChildNo, "", new { @class = "text-danger" })

        </div>
        <div class="input-group col mb-3">
            <div class="input-group-prepend"><span class="input-group-text">Ticket No</span></div>
            @Html.EditorFor(model => model.TicketNo, new { htmlAttributes = new { @type = "text", @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.TicketNo, "", new { @class = "text-danger" })

        </div>
        
    </div>
    <div class="form-row">
        <div class="input-group col mb-3">
            <div class="input-group-prepend"><span class="input-group-text">Infant No</span></div>
            @Html.EditorFor(model => model.infantNo, new { htmlAttributes = new { @type = "text", @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.infantNo, "", new { @class = "text-danger" })

        </div>
        <div class="input-group col mb-3">
            <div class="input-group-prepend"><span class="input-group-text">PNR No</span></div>
            @Html.EditorFor(model => model.PNRno, new { htmlAttributes = new { @type = "text", @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.PNRno, "", new { @class = "text-danger" })

        </div>
        <div class="input-group col mb-3">
            <div class="input-group-prepend"><span class="input-group-text">Flight No</span></div>
            @Html.EditorFor(model => model.FlightNo, new { htmlAttributes = new { @type = "text", @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.FlightNo, "", new { @class = "text-danger" })

        </div>
      


    </div>
    <div class="form-row">
           <div class="input-group col mb-3">
            <div class="input-group-prepend"><span class="input-group-text">Airline</span></div>
            @Html.EditorFor(model => model.Airline, new { htmlAttributes = new { @type = "text", @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Airline, "", new { @class = "text-danger" })

        </div>
        <div class="input-group col mb-3">
            <div class="input-group-prepend"><span class="input-group-text">Destination Airport</span></div>
            @Html.EditorFor(model => model.ToLoc, new { htmlAttributes = new { @type = "text", @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ToLoc, "", new { @class = "text-danger" })

        </div>
        <div class="input-group col mb-3">
            <div class="input-group-prepend"><span class="input-group-text">Check in buggage?</span></div>
            @Html.EditorFor(model => model.HasCarrier, new { htmlAttributes = new { @type = "text", @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.HasCarrier, "", new { @class = "text-danger" })

        </div>

    

    </div>
    <div class="form-row">
        <div class="input-group col mb-3">
            <div class="input-group-prepend"><span class="input-group-text">Include Meal?</span></div>
            @Html.EditorFor(model => model.HasAc, new { htmlAttributes = new { @type = "text", @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.HasAc, "", new { @class = "text-danger" })

        </div>
        <div class="input-group col mb-3">
                <div class="input-group-prepend"><span class="input-group-text">Is Return?</span></div>
@Html.EditorFor(model => model.IsReturn, null, new { htmlAttributes = new { @type = "text", @class = "form-control " } })   

            </div>
          
        
        <div class="input-group col mb-3">
            <div class="input-group-prepend"><span class="input-group-text">Return Date</span></div>
             @Html.EditorFor(model => model.Tdate, new { htmlAttributes = new { @type = "text", @class = "eadatetime form-control" } })
            @Html.ValidationMessageFor(model => model.Tdate, "", new { @class = "text-danger" })

        </div>

    </div>
</fieldset>
@if (ViewBag.isReadOnly != null)
{@Html.Action("CustSearch", "SR", new { id = Model.SRDID })
}
<script >
  
    if ($('#IsReturn').val() == 'true') {

        $('#Tdate').prop("disabled", true);

    }
    else if ($('#IsReturn').val == 'false') {
        $('#Tdate').prop("disabled", false);
    }
    $('#IsReturn').on('change', function () {
        
        if($(this).val() == 'true') {
            
                $('#Tdate').prop("disabled", false);

            }
        else if ($(this).val() == 'false') {
                $('#Tdate').prop("disabled", true);
            }

          
        });

     

</script>
<script>
    $(function () {
        $('.eadatetime').datetimepicker({
            dateFormat: "dd-MM-yy",
            showButtonPanel: true,
            changeMonth: true,
            changeYear: true,
            timeFormat: "hh:mm"

        });
        $('.eadate').datepicker({
            dateFormat: "dd-MM-yy",
            showButtonPanel: true,
            changeMonth: true,
            changeYear: true,


        });

        //Disable the browsers default date picker
        jQuery.validator.methods["date"] = function (value, element) { return true; }



    });
   


</script>